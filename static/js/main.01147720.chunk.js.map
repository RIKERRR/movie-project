{"version":3,"sources":["components/Search.js","components/Categories.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["refreshPage","window","location","reload","console","log","Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","onClick","Categories","inTheaters","mostPopular","highestRated","id","document","getElementById","classList","add","remove","Result","result","openPopup","alt","src","poster_path","title","Results","results","map","key","Popup","selected","closePopup","release_date","vote_average","overview","App","useState","s","state","setState","apiurlInTheaters","axios","then","data","alert","prevState","e","target","value","apiurlSearch","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01147720.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction refreshPage() {\r\n  window.location.reload(false);\r\n  console.log(\"yes\")\r\n}\r\n\r\nfunction Search({ handleInput, search }) {\r\n  return (\r\n    <section className=\"searchbox-wrap\">\r\n      <input \r\n        type=\"text\" \r\n        placeholder=\"Search for a movie...\" \r\n        className=\"searchbox\" \r\n        onChange={handleInput}\r\n        onKeyPress={search}\r\n      />\r\n      <br></br>\r\n      <p className=\"clear\" onClick={refreshPage}>Clear results</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Search","import React from 'react'\r\n\r\nexport default function Categories({inTheaters, mostPopular, highestRated }) {\r\n    const clickedInTheaters = () => {\r\n        let inTheaters = document.getElementById('inTheaters');\r\n        let mostPopular = document.getElementById(\"mostPopular\");\r\n        inTheaters.classList.add(\"clicked\");\r\n        mostPopular.classList.remove(\"clicked\");\r\n        highestRated.classList.remove(\"clicked\");\r\n    } \r\n    const clickedMostPopular = () => {\r\n        let inTheaters = document.getElementById('inTheaters');\r\n        let mostPopular = document.getElementById(\"mostPopular\");\r\n        inTheaters.classList.remove(\"clicked\");\r\n        mostPopular.classList.add(\"clicked\");\r\n    } \r\n    const clickedHighestRated = () => {\r\n        let inTheaters = document.getElementById('inTheaters');\r\n        let mostPopular = document.getElementById(\"mostPopular\");\r\n        inTheaters.classList.remove(\"clicked\");\r\n        mostPopular.classList.remove(\"clicked\");\r\n    } \r\n    return (\r\n        <div className=\"navDiv\">\r\n            <ul className=\"nav\">\r\n                <li id=\"inTheaters\" className=\"nav-list-item clicked\" onClick={inTheaters}><a onClick={clickedInTheaters}>In Theaters</a></li>\r\n                <li id=\"mostPopular\" className=\"nav-list-item\" onClick={mostPopular}><a onClick={clickedMostPopular}>Most Popular</a></li>\r\n                \r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n/* const clickedToggle = () => {\r\n    var inTheaters = document.getElementById(\"inTheaters\");\r\n    var mostPopular = document.getElementById(\"mostPopular\");\r\n    var highestRated = document.getElementById(\"highestRated\");\r\n    inTheaters.classList.toggle(\"clicked\");\r\n    mostPopular.classList.toggle(\"clicked\");\r\n    highestRated.classList.toggle(\"clicked\");\r\n} */\r\n","import React from 'react'\r\n\r\nconst imageURL = \"https://image.tmdb.org/t/p/w300\";\r\n\r\nfunction Result({result, openPopup}) {\r\n  return (\r\n    <div className=\"result\" onClick={() => openPopup(result.id)}>\r\n      <img alt=\"...Not found\" src={imageURL + result.poster_path} />\r\n      <h3>{result.title}</h3>\r\n    </div>\r\n  )\r\n}\r\nexport default Result","import React from 'react'\r\nimport Result from './Result'\r\n\r\nfunction Results({ results, openPopup }) {\r\n  return (\r\n    <section className=\"results\">\r\n        {results.map(result => (\r\n            <Result key={result.id} result={result} openPopup={openPopup} />\r\n        ))}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Results","import React from 'react'\r\n\r\nfunction Popup({ selected, closePopup }) {\r\n  const imageURL = \"https://image.tmdb.org/t/p/w300\";\r\n  return (\r\n    <section className=\"popup\">\r\n        <div className=\"content\">\r\n            <div className=\"top-info\">\r\n              <h2>{selected.title} <span>(Released: {selected.release_date})</span></h2>\r\n              <p className=\"rating\">Score: {selected.vote_average} / 10\r\n                <br></br>\r\n              </p>\r\n            </div>\r\n            <div className=\"flexbox-container\">\r\n              \r\n              <div className=\"flexbox-item flexbox-img\">\r\n                <img id=\"selected-poster\" alt=\"Not found\" src={imageURL + selected.poster_path} />\r\n              </div>\r\n              <div className=\"flexbox-item flexbox-info\">\r\n                Overview:\r\n                <br></br>\r\n                <br></br>   \r\n                {selected.overview}\r\n              </div>\r\n              \r\n            </div>\r\n            <br></br>\r\n            <button className=\"close\" onClick={closePopup}>Close</button>\r\n\r\n\r\n\r\n\r\n\r\n    \r\n            \r\n        </div>\r\n    </section>\r\n  )\r\n}\r\nexport default Popup","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Search from './components/Search';\nimport Categories from './components/Categories'\nimport Results from './components/Results';\nimport Popup from './components/Popup'\n\nfunction App() {\n  const [state, setState] = useState ({\n    s: \"\",\n    results: [],\n    selected: {}, \n  });\n // const searchURL= \"https://api.themoviedb.org/3/search/movie?\";\n  //const apiKey = \"&api_key=dd5e1861bd5539296146a37d79b6d674\";\n  const apiurlSearch = \"https://api.themoviedb.org/3/search/movie?&api_key=dd5e1861bd5539296146a37d79b6d674&language=en-US\"\n  const apiurlSearchID_first = \"https://api.themoviedb.org/3/movie/\"\n  const apiurlSearchID_second = \"?api_key=dd5e1861bd5539296146a37d79b6d674&language=en-US\";\n  const apiurlInTheaters = \"https://api.themoviedb.org/3/discover/movie?api_key=dd5e1861bd5539296146a37d79b6d674&with_release_type=2|3\"\n  const apiurlMostPopular = \"https://api.themoviedb.org/3/discover/movie?api_key=dd5e1861bd5539296146a37d79b6d674&sort_by=popularity.desc&with_release_type=4|7\";\n  const apiurlHighestRated = \"https://api.themoviedb.org/3/discover/movie/?api_key=dd5e1861bd5539296146a37d79b6d674&certification_country=US&sort_by=vote_average.desc\";\n  //const apiurl = \"http://www.omdbapi.com/?apikey=33d8516c\";\n  \n  //Display InTheaters if results = \"\"\n  if (state.results == \"\") {\n    axios(apiurlInTheaters).then(( { data }) => {\n      let results = data.results;\n      if (results) {\n        console.log(data)\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      }\n      else {\n        return alert(\"The movie or TV show you have entered is not found\");\n      }\n    });\n  }\n\n  const inTheaters = () => {\n    axios(apiurlInTheaters).then(( { data }) => {\n      let results = data.results;\n      if (results) {\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      }\n    });\n  }\n\n  const mostPopular = () => {\n    axios(apiurlMostPopular).then(( { data }) => {\n      let results = data.results;\n      if (results) {\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      }\n    });\n  }\n\n  const highestRated = () => {\n    axios(apiurlHighestRated).then(( { data }) => {\n      let results = data.results;\n      if (results) {\n        setState(prevState => {\n          return { ...prevState, results: results }\n        })\n      }\n    });\n  }\n\n  //Change results to what has been typed (change after \"Enter\" has been pressed)\n  const search = (e) => {\n    if (e.key === \"Enter\") {\n      state.results = \"\";\n      axios(apiurlSearch + \"&query=\" + state.s).then(( { data }) => {\n        let results = data.results;\n        if (results) {\n          console.log(data)\n          setState(prevState => {\n            return { ...prevState, results: results }\n          })\n        }\n        else {\n          return alert(\"The movie or TV show you have entered is not found\");\n        }\n      });\n    }\n  }\n\n  const handleInput = (e) => {\n    let s = e.target.value;\n    setState(prevState => {\n      return { ...prevState, s: s }\n    });\n  }\n\n  const openPopup = id => {\n    axios(apiurlSearchID_first + id + apiurlSearchID_second).then(({ data }) => {\n      let result = data;\n      setState(prevState => {\n        return { ...prevState, selected: result }\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected:{} }\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 id=\"appTitle\">Grand Movie Search</h1>\n      </header>\n      <main onClick={closePopup}>\n        <Search handleInput={handleInput} search={search} />\n        <Categories inTheaters={inTheaters} mostPopular={mostPopular} />\n        <Results results={state.results} openPopup={openPopup} />\n\n        {(typeof state.selected.title != \"undefined\") ? <Popup selected={state.selected} closePopup={closePopup} /> : false }\n      </main>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}